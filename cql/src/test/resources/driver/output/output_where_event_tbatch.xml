<Definitions>
  <Application id="app_where_event_tbatch">
    <confs>
      <property key="operator.kafka.brokers" value="192.168.0.2:9092"/>
      <property key="operator.kafka.messageserializerclass" value="kafka.serializer.StringEncoder"/>
      <property key="operator.kafka.zksessiontimeout" value="20000"/>
      <property key="operator.kafka.zksynctime" value="20000"/>
      <property key="operator.kafka.zookeepers" value="localhost:2181,192.168.0.2:2181"/>
      <property key="serde.simpleserde.separator" value=","/>
    </confs>
    <Schemas>
      <Schema id="input_where_event_tbatch" name="input_where_event_tbatch">
        <attribute name="o_id" type="java.lang.Integer"/>
        <attribute name="orderdate" type="java.lang.String"/>
        <attribute name="orderprice" type="java.lang.Long"/>
        <attribute name="customer" type="java.lang.String"/>
        <attribute name="tstamp" type="java.lang.Long"/>
      </Schema>
      <Schema id="output_where_event_tbatch" name="output_where_event_tbatch">
        <attribute name="sumprice" type="java.lang.Long"/>
        <attribute name="avgprice" type="java.lang.Long"/>
        <attribute name="countprice" type="java.lang.Long"/>
      </Schema>
    </Schemas>
    <Operators>
      <KafkaInput id="KafkaInput_001" parallel="1">
        <deserializer class="SimpleSerDe"/>
        <groupId>gidkpi_1_4</groupId>
        <topic>where_event_tbatch_in</topic>
      </KafkaInput>
      <KafkaOutput id="KafkaOutput_002" parallel="1">
        <serializer class="SimpleSerDe"/>
        <topic>where_event_tbatch_out</topic>
      </KafkaOutput>
      <Aggregator id="Aggregator_004" parallel="1">
        <outputExpression> sum( input_where_event_tbatch.orderprice ) ,  avg( input_where_event_tbatch.orderprice ) ,  count( input_where_event_tbatch.orderprice ) </outputExpression>
        <window name="event_tbatch">
          <length>10000</length>
          <timestampField>input_where_event_tbatch.tstamp</timestampField>
          <excludeNow>false</excludeNow>
        </window>
        <filterBeforeAggregate>((input_where_event_tbatch.orderprice = 100) or (input_where_event_tbatch.orderprice &gt;= 700))</filterBeforeAggregate>
      </Aggregator>
    </Operators>
    <Transitions>
      <Transition name="st_001" from="KafkaInput_001" to="Aggregator_004" distributedType="SHUFFLE" schemaName="input_where_event_tbatch"/>
      <Transition name="st_003" from="Aggregator_004" to="KafkaOutput_002" distributedType="SHUFFLE" schemaName="output_where_event_tbatch"/>
    </Transitions>
  </Application>
</Definitions>